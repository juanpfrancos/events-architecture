services:
  db:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${EVENTS_DB}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${EVENTS_DB} -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  notification_service:
    build:
      context: ./notification_service
      dockerfile: Dockerfile
    ports:
      - "${NOTIFICATION_SERVICE_PORT}:${NOTIFICATION_SERVICE_PORT}"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - backend

  events_service:
    build:
      context: ./events_service
      dockerfile: Dockerfile
    ports:
      - "${ARTICLES_SERVICE_PORT}:${ARTICLES_SERVICE_PORT}"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - backend

  auth_service:
    build:
      context: ./auth_service
      dockerfile: Dockerfile
    ports:
      - "${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - backend
      
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.1
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"'"]
      interval: 15s
      timeout: 10s
      retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.1
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - backend
    restart: unless-stopped

  create_index:
      build:
        context: ./events_service
        dockerfile: Dockerfile
      depends_on:
        elasticsearch:
          condition: service_healthy
      command: ["poetry", "run", "python", "elasticsearch_client.py"]
      networks:
        - backend
      restart: "no"
networks:
  backend:
    driver: bridge
